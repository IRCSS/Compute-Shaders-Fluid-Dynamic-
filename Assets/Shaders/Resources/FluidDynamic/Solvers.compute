// SOLVING EQUATION Ax = b FOR SPARSE MATRIX
// DECOMPOSITION    A  = D + L + U  => x_k+1 = D_Inverse * (b - (L + U) x_k)


//____________________________________________________________________________________
// KERNELS

#pragma kernel Jacobi_Solve


//____________________________________________________________________________________
// DECLERNATIONS

StructuredBuffer<float4>     _b_buffer;                              // This buffer holds the b constants values in the equation Ax = b. In the case of the diffusion equaitons for example it is the A*new_x = old_x. So it is ex the value of velocity in the previus frame
StructuredBuffer<float4>     _updated_x_buffer;                      // This buffer holds the guess for the values of x in the previus iteration. So if you are in k iteration of jacobi, it is holding the k-1 values, a slightly worse estmation than the one you will be getting in k
RWStructuredBuffer<float4>   _results;                               // the k iteration estimation values are written here. In the cpu the buffer pointers are swapped so that the _updated_x_buffer becomes the results of the pervius one

int                          _current_iteration;                     // Can be used for debug porpuses
float                        _rDiagonal;                             // reciprocal beta of the equation. This is the coefficient of the variable you are currently solving of the matrix. Basicly the entry on the diagonal of the A = D + L + U decomposition. It is reciprical because you are solving the  -- new_x = D_inverse * (b - (L + U) * previouse_X -- See wikipedia for more details: https://en.wikipedia.org/wiki/Jacobi_method in this specific problem of a Possion Equation, it is set in a way so that in combination with the center factor, it recreates the equations for Laplace(p) = Divergent(v) and for diffusion the implicit diffusion. Again for more intutative explaination, have a look at my blog post on fluid simulation, linked in Read Me 
float                        _centerFactor;                          // it is the factor multiplied with the main texture read in the center of the pervious state. So in the equation (Ax = b) it is the coeffcient of b on the RHS if there is any. This is here so that the same solver can be used for different scenario. So in the equation x[i,j] = x0[i,j] - a*(x[i-1,j]+x[i+1,j]+x[i,j-1]+x[i,j+1] -4*x[i,j]), it is the number 1 of x0. 

#include "FluidDynamicCommonUniforms.cginc"


//____________________________________________________________________________________
// HELPER FUNCTIONS

#include "FluidDynamicUtility.cginc"

//____________________________________________________________________________________
// MAIN FUNCTIONS



//----------------------------------------------------------------------------
// Function         : Jacobi_Solve
// Description      : Iterative method for solving linear equations systems. It solves the x in the equation Ax = b
//                    The function is dispatch N times from the CPU. N shouldnt be lower than 20
//                    The results are written in the _results buffer based on the pervius iteration results which are in _updated_x_buffer
//                    The CPU swaps these buffers back and forth between each iteration
//----------------------------------------------------------------------------

[numthreads(16,16,1)]                            // runs once for every equation variable that needs solving
void Jacobi_Solve(uint3 id : SV_DispatchThreadID)
{

    int2  coordinate = id.xy;


    float4 left     = _updated_x_buffer[id2Dto1D(coordinate - int2(1, 0))];
    float4 right    = _updated_x_buffer[id2Dto1D(coordinate + int2(1, 0))];
    float4 bottom   = _updated_x_buffer[id2Dto1D(coordinate - int2(0, 1))];
    float4 top      = _updated_x_buffer[id2Dto1D(coordinate + int2(0, 1))];

    float4 b_center = _b_buffer[id2Dto1D(coordinate)];

    _results[id2Dto1D(coordinate)] = (left + right + bottom + top + (_centerFactor * b_center)) * _rDiagonal;
}
