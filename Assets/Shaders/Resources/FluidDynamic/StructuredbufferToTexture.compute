// THIS FILE CONTAINS UTILITY FOR CONVERTING A STRUCTURED BUFFER FOR RENDER TEXTURE FOR THE PORPUSE OF VISUALISATION


//____________________________________________________________________________________
// KERNELS
#pragma kernel PressureStructeredToTextureBillinearR32
#pragma kernel VelocityStructeredToTextureBillinearRG32

//____________________________________________________________________________________
// DECLERNATIONS
#include "FluidDynamicCommonUniforms.cginc"

//____________________________________________________________________________________
// HELPER FUNCTIONS
#include "FluidDynamicUtility.cginc"

//____________________________________________________________________________________
// MAIN FUNCTIONS

// StructeredToTextureBillinear DECLERNATIONS

StructuredBuffer<float4>   _Pressure_StructeredToTexture_Source_R32;
RWTexture2D<float4>        _Pressure_StructeredToTexture_Results_R32;
int                        _Pressure_Results_Resolution;

//----------------------------------------------------------------------------
// Function         : AddDye
// Description      : This kernel blits a structured buffer on top of a render texture
//                    for visualisation. It runs once per pixel of the target render texture
//                    and in case the the render texture is higher res than the source, it bilinearly
//                    interpolates between the closest structuredbuffer entries
//----------------------------------------------------------------------------
[numthreads(16,16,1)]
void PressureStructeredToTextureBillinearR32(uint3 id : SV_DispatchThreadID)
{
    float2 coord  = (float2)id.xy / (float)(_Pressure_Results_Resolution -1 );          // first normailizing the thread ids based on the targets resoltuion
           coord *= (float) (i_Resolution-1);                                  // remapping it to the coordinates of the structured buffer, but still as 2D ids. 

           _Pressure_StructeredToTexture_Results_R32[id.xy] = StructuredBufferBilinearLoad(_Pressure_StructeredToTexture_Source_R32, coord);

}


StructuredBuffer<float4>   _Velocity_StructeredToTexture_Source_RB32;
RWTexture2D<float4>        _Velocity_StructeredToTexture_Results_RB32;
int                        _Velocity_Results_Resolution;

//----------------------------------------------------------------------------
// Function         : AddDye
// Description      : This kernel blits a structured buffer on top of a render texture
//                    for visualisation. It runs once per pixel of the target render texture
//                    and in case the the render texture is higher res than the source, it bilinearly
//                    interpolates between the closest structuredbuffer entries
//----------------------------------------------------------------------------
[numthreads(16, 16, 1)]
void VelocityStructeredToTextureBillinearRG32(uint3 id : SV_DispatchThreadID)
{
    float2 coord = (float2)id.xy / (float)(_Pressure_Results_Resolution - 1);          // first normailizing the thread ids based on the targets resoltuion
    coord *= (float)(i_Resolution - 1);                                  // remapping it to the coordinates of the structured buffer, but still as 2D ids. 

    _Velocity_StructeredToTexture_Results_RB32[id.xy] = StructuredBufferBilinearLoad(_Velocity_StructeredToTexture_Source_RB32, coord);

}
