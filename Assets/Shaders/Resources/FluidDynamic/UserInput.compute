// THIS FILE CONTAINS THE KERNELS THAT ARE RESPONSIBLE FOR USER INPUT. THIS INCLUDES THE FORCES APPLIED AS WELL AS THE DYE ADDED

//____________________________________________________________________________________
// KERNELS
#pragma kernel AddDye
#pragma kernel Add_constant_dye
#pragma kernel AddDye_from_picture
#pragma kernel AddForce_mouse
#pragma kernel Add_constant_force_at
#pragma kernel Add_constant_uniform_force


//____________________________________________________________________________________
// DECLERNATIONS
#include "FluidDynamicCommonUniforms.cginc"
RWStructuredBuffer<float4> _dye_buffer;                                      // This holds the dye value. This buffer is diffused and advected in the equations

//____________________________________________________________________________________
// HELPER FUNCTIONS
#include "FluidDynamicUtility.cginc"

//____________________________________________________________________________________
// MAIN FUNCTIONS

// ADDDYE DECLERNATIONS

float4                     _dye_color;                                       // The color to add when mouse is pressed. There are other ways to switch between colors
float2                     _mouse_position;                                  // position of the mouse on the simulation grid it goes between 0 and the cell number in each dimension
float                      _mouse_pressed;                                   // weather the mouse is being pressed right now. It supports half pressed and sensitivity
float                      _mouse_dye_falloff;                               // Determines at which distance the mouse should start applying dye to a cell and how it falls off as it gets futher away. X is the brush size and y is the fallout towards inside. So x should be bigger than y.
float                      _mouse_dye_radius;

//----------------------------------------------------------------------------
// Function         : AddDye
// Description      : This function adds dye on the structured buffer that contains  
//                    The dye quanitaty. It runs once per grid cell on the simulation
//                    grid
//----------------------------------------------------------------------------

[numthreads(16,16,1)]
void AddDye(uint3 id : SV_DispatchThreadID)
{
    

    float2 vecToMouse = _mouse_position - (float2)id.xy;
    float  disToMouse = length(vecToMouse);
    
    float  dyeAmount  = smoothstep(_mouse_dye_radius, 
        _mouse_dye_radius - _mouse_dye_falloff, disToMouse);                 // Calculate the distance to the mouse pos and decide wether this cell is close neough by the mouse to be effected by it

           dyeAmount *= _mouse_pressed;                                      // Factor in the mouse being pressed. This is zero when mouse is not being pressed and one when it is. On touch sensitive stuff this can also take a value between


    float4 currentDyeBufferValue  = _dye_buffer[id2Dto1D(id.xy)];
           currentDyeBufferValue += dyeAmount * _dye_color;
    _dye_buffer[id2Dto1D(id.xy)]  = currentDyeBufferValue;
}


//----------------------------------------------------------------------------
// Function         : Add_constant_dye_at
// Description      :  This adds constant dye at a given point. You can use it to generate a 
//                     source. For example for shaum etc 
//                     
//----------------------------------------------------------------------------
 
float2                     _constant_dye_source_position;
float                      _constant_dye_falloff;
float                      _constant_dye_radius;

[numthreads(16,16,1)]
void Add_constant_dye(uint3 id : SV_DispatchThreadID)
{ 
    

    float2 vecToSource = _constant_dye_source_position - (float2)id.xy;
    float  disToSource = length(vecToSource);
    
    float  dyeAmount  = smoothstep(_constant_dye_radius,
        _constant_dye_radius - _constant_dye_falloff, disToSource);                 // Calculate the distance to the mouse pos and decide wether this cell is close neough by the mouse to be effected by it


    float4 currentDyeBufferValue  = _dye_buffer[id2Dto1D(id.xy)];
           currentDyeBufferValue += dyeAmount * _dye_color;
    _dye_buffer[id2Dto1D(id.xy)]  = currentDyeBufferValue;
}


//----------------------------------------------------------------------------
// AddDye_from_picture DECLERNATIONS

Texture2D<float4>           _dye_source_texture;
SamplerState                sampler_dye_source_texture;                      // Needs to be named like this in Unity. Or use one of the basic sampler

//----------------------------------------------------------------------------
// Function         : AddDye_from_picture
// Description      : This function adds dye from a texture as a source
//----------------------------------------------------------------------------

[numthreads(16,16,1)]
void AddDye_from_picture(uint3 id : SV_DispatchThreadID)
{
    float2 uv = float2((float)id.x / (float)(i_Resolution-1), (float)id.y / (float)(i_Resolution-1));
    _dye_buffer[id2Dto1D(id.xy)]  = _dye_source_texture.SampleLevel(sampler_dye_source_texture, uv, 0.0);
}

//- ---------------------------
// ADDDFORCE DECLERNATIONS
RWStructuredBuffer<float4> _user_applied_force_buffer;                       // This buffer contains the user applied force per cell of the simulation grid. 
float                      _force_multiplier;                                // Determines how strong the force is which the mouse movment applies
float                      _force_effect_radius;                             // This parameter determins how large the mouse object is which iis pushing fluid around on the grid
float                      _force_falloff;                                   // This determins how soft the fall off is from the force effect radius
float2                     _mouse_pos_prev;                                  // The previous frame mouse position. This is already in the coordinate system of the grids
float2                     _mouse_pos_current;                               // Current frame mouse position, same as above.

//- ---------------------------
// ADDFORCE HELPER FUNCTIONS
#include "2DDrawingUtility.cginc"

//----------------------------------------------------------------------------
// Function         : AddForce_mouse
// Description      : This kernel adds user input force based on mouse movement to the fluid simulation
//                    Based on the previous pos and current mouse positon, for all pixels that were on the way
//                    a force is added to them. The calculation is done using projections and sign distance. 
//----------------------------------------------------------------------------
[numthreads(16,16,1)]
void AddForce_mouse(uint3 id : SV_DispatchThreadID) {
    float2 mouse_prev2Curr  = _mouse_pos_current - _mouse_pos_prev;

    float  mouse_mov_length = length(mouse_prev2Curr);

    //float2 mouse2Grid = (float2)id.xy - _mouse_pos_current;

    //float M2GLength = length(mouse2Grid);
    //if (M2GLength > epsilon)

    //{
    //    float forceFactr = 1. - clamp(smoothstep(_force_effect_radius, _force_effect_radius + _force_falloff, M2GLength), 0., 1.);

    //    _user_applied_force_buffer[id2Dto1D(id.xy)] += float4((mouse2Grid.xy / M2GLength) * forceFactr * _force_multiplier *2., 0., 0.);

    //} 



    if (mouse_mov_length < epsilon) return; 
           

    float cellCloseEnough = DrawHalfVectorWithLength(_mouse_pos_prev, mouse_prev2Curr / mouse_mov_length, mouse_mov_length,
                                               (float2) id.xy, _force_effect_radius, _force_falloff);
    
    _user_applied_force_buffer[id2Dto1D(id.xy)] += float4(cellCloseEnough * mouse_prev2Curr.xy * _force_multiplier, 0., 0.);

}

//----------------------------------------------------------------------------
// Add_constant_force_at DECLERNATIONS


float4                     _constant_force_source_direction;
float2                     _constant_force_source_position;
float                      _constant_force_falloff;
float                      _constant_force_radius;


//----------------------------------------------------------------------------
// Function         : AddForce_mouse
// Description      : This kernel adds user input force based on mouse movement to the fluid simulation
//                    Based on the previous pos and current mouse positon, for all pixels that were on the way
//                    a force is added to them. The calculation is done using projections and sign distance. 
//----------------------------------------------------------------------------
[numthreads(16, 16, 1)]
void Add_constant_force_at(uint3 id : SV_DispatchThreadID) 
{
    float2 vecToSource = _constant_force_source_position - (float2)id.xy;
    float  disToSource = length(vecToSource);

    float  forceMask = smoothstep(_constant_force_radius,
        _constant_force_radius - _constant_force_falloff, disToSource);                 // Calculate the distance to the mouse pos and decide wether this cell is close neough by the mouse to be effected by it

    _user_applied_force_buffer[id2Dto1D(id.xy)] += float4(forceMask *_constant_force_source_direction.xy, 0., 0.);
}
 


// ---------------------
float2 _uniform_force;


//----------------------------------------------------------------------------
// Function         : Add_constant_uniform_force
// Description      : This adds a uniform force over the entire grid. Force is euqla everywhere
//                    
//                    
//----------------------------------------------------------------------------
[numthreads(16, 16, 1)]
void Add_constant_uniform_force(uint3 id : SV_DispatchThreadID)
{

    _user_applied_force_buffer[id2Dto1D(id.xy)] += float4(_uniform_force.xy,0.,0.);
}
